// Measuring intensity from immunofluorescence experiments using ImageJ (Microtubules in GFP[#2] channel)
/*
Use-case: Used to measuring fluorescent intensity for single-cell quantitative analysis of protein levels and structure size.
This is primarily used for objects that appear symmetrical and may have different localization of proteins on a biological structure.

This ImageJ script still requires some fine-tuning but the general code structure is built. 
It is used for automated quantification of spindles (more specifically, spindle halves) acquired by high-resolution microscopy. 
Creates a sum-intensity projection of each image in the indirectory, rotates the object (spindle) to be positioned along the horizontal axis, 
selects the object (spindle), and dividies the object's RoI into left and right halves to generate a RoI for each spindle half, 
and measures the pixel intensity and length of the spindle half for the specified channel. 
To be added: Take those new half RoIs and measure intensity values in other channels of the same image.
// Measuring spindle half densities (MTs in GFP[#2] channel)

dir = getDirectory("Choose Dir_in Directory ");

Get_Out = getDirectory("Choose Get Out Directory ");

File.open("C:/Users/meela/Desktop/Batch processing test/Outdirectory/Results.txt");
results_path = "C:/Users/meela/Desktop/Batch processing test/Outdirectory/Results.txt";
/////////////////////////////////////////////////////////////////////////

//Create the list of files in the folder "dir"
Filelist = getFileList(dir);
///////////////////////////////////////////////////////////////////
//Initialisation of a counter
b=1;
Lim=Filelist.length;
///////////////////////////////////////////////////////////////////////////////
//Loop inside the list

for(a=0; a<Filelist.length; a++)
{

//printing the counter

	print("Counter", b, "sur", Lim);

//get the name of the file to open

	FileIn =Filelist[a];

//create a path

	path=dir+"\\"+ FileIn;

//open the file
	
	run("Bio-Formats", "open=path color_mode=Default view=Hyperstack stack_order=XYCZT");

	name = File.name;


////////////////////////////

// set image scale parameters: scope #2 = 0.0657 um
// Check the following parameters in Set Measurements: AREA and INTEGRATED DENSITY and DISPLAY LABEL and FERET'S DIAMETER
// 

// setup thresholding 

///////////////////////////////////
// Identify spindle and RoI

im = getTitle();
selectWindow(im);
run("Duplicate...", "duplicate channels=2");
run("Z Project...", "projection=[Sum Slices]");
setAutoThreshold("Default dark no-reset");
run("Threshold...");
run("Analyze Particles...", "display exclude include add"); 

nROIs = roiManager("count");
for (row=0; row < nROIs; row++){
	roiManager("Select", row);
	area = getResult("Area", row);
	if (area >40){
			label = getResultLabel(row);
			String.copy(label);
			roiManager("Select", row);
  			roiManager("Save", "C:/Users/meela/Desktop/Batch processing test/Outdirectory/" + label + ".roi");
			roiManager("Select", row);
			roiManager("reset");
			break;
		}
	}


Table.deleteRows(0, nROIs);
roiManager("open", "C:/Users/meela/Desktop/Batch processing test/Outdirectory/" + label + ".roi");
roiManager("Select", 0);
roiManager("Rename", label);
run("Measure");


///////////////////////////////////
// rotate image/spindle to horizontal axis 
requires("1.33o");
run("Select None");
roiManager("Show None");
x1 = getResult("FeretX", 0);
y1 = getResult("FeretY", 0);
x2 = getResult("X", 0);
y2 = getResult("Y", 0);
drawLine(x1, y1, x2, y2);
if (x1==-1)
   exit("This macro requires a straight line selection");
angle = (180.0/PI)*atan2(y1-y2, x2-x1);
run("Arbitrarily...", "angle="+angle+" interpolate");

angle = getResult("FeretAngle", 0);
angle = toString(angle);
roiManager("Show None");
roiManager("Select", 0);
run("Rotate...", "rotate angle="+angle);
roiManager("Update");
Table.deleteRows(0, nROIs);
roiManager("Select", 0);
run("Measure");
label = getResultLabel(0);
roiManager("Rename", label);	
saveAs("selection", "C:/Users/meela/Desktop/Batch processing test/Outdirectory/" + label + ".roi");


///////////////////////////////////
//divides current roi into left and right half 

requires("1.33o");
roiManager("Select", 0); 
getSelectionBounds(x, y, width, height);
getRawStatistics(totalArea); 
minOff = 1e9; 
for (w=1; w < width; w++){ 
        roiManager("Select", 0); 
        setKeyDown("alt"); 
        makeRectangle(x, y, w, height); 
        getRawStatistics(rightArea); 
        off = abs(2*rightArea - totalArea); 
        if (off < minOff){ 
                minOff = off; 
                xHalf = x + w; 
                wHalf = w; 
                halfArea = rightArea; 
        } 
} 

///////////////////////////////////

//Display result: 
roiManager("Select", 0); 
setKeyDown("alt"); 
makeRectangle(x, y, wHalf, height); 
run("Copy");//work around 
run("Add to Manager"); 
//run("Measure"); 
roiManager("Select", 0); 
setKeyDown("alt"); 
makeRectangle(x+wHalf, y, width - wHalf, height); 
run("Copy");//work around 
run("Add to Manager"); 
//run("Measure");

roiManager("Select", newArray(0,1,2));
run("Select All");
roiManager("multi-measure measure_all");

saveAs("results", ".xls");

//data = String.copyResults;
//print(data); PRINTS ZEROES
//File.append(data, results_path);


// delete ROIs	
roiManager("reset");
Table.deleteRows(0, 2);
run("Close All");	




// code for measuring backgorund: idea --> convert to 8-iit, get background intesntity, then save that for each spindle roi so we can clean later
/*
run("8-bit");
setAutoThreshold("Default dark no-reset");
getThreshold(lower, upper);


percentage = 0.95;
target = (1-percentage)*getWidth()*getHeight();
nBins = 256;
getHistogram(values,counts,nBins);
sum = 0; threshold = -1;
for(i=0; i<nBins; i++){
    sum += counts[i];
    if( (sum >= target) & (threshold < 0) ){ 
    	threshold = i; 
    	}
}
setThreshold(0,threshold);


*/
////////////////////////////
b=b+1;

}

// save appended results to a csv file named results.csv 

exit()







